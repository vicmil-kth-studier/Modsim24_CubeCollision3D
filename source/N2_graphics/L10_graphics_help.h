#include "L9_user_input.h"
// Add some basic shapes that you can draw, like a cube, sphere, arrow etc

namespace graphics_help {
const std::string general_mtl_file = 
"# Blender MTL File: 'None'\n"
"# Material Count: 8\n"
"\n"
"newmtl Yellow1\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 1.000000 1.000000 0.000000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n"
"\n"
"newmtl Red1\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 1.000000 0.000000 0.000000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n"
"\n"
"newmtl Red2\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 0.500000 0.000000 0.000000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n"
"\n"
"newmtl Red3\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 0.100000 0.100000 0.100000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n"
"\n"
"newmtl Green1\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 0.000000 1.000000 0.000000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n"
"\n"
"newmtl Blue1\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 0.000000 0.000000 1.000000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n"
"\n"
"newmtl Blue2\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 0.000000 0.000000 0.500000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n"
"\n"
"newmtl Blue3\n"
"Ns 225.000000\n"
"Ka 1.000000 1.000000 1.000000\n"
"Kd 0.000000 1.000000 1.000000\n"
"Ks 0.500000 0.500000 0.500000\n"
"Ke 0.000000 0.000000 0.000000\n"
"Ni 1.450000\n"
"d 1.000000\n"
"illum 2\n";

const std::string blue_cube =              
"# Blender v3.0.0 OBJ File: ''\n"
"# www.blender.org\n"
"mtllib blue_cube.mtl\n"
"o Cube\n"
"v 1.000000 1.000000 -1.000000\n"
"v 1.000000 -1.000000 -1.000000\n"
"v 1.000000 1.000000 1.000000\n"
"v 1.000000 -1.000000 1.000000\n"
"v -1.000000 1.000000 -1.000000\n"
"v -1.000000 -1.000000 -1.000000\n"
"v -1.000000 1.000000 1.000000\n"
"v -1.000000 -1.000000 1.000000\n"
"vt 0.875000 0.500000\n"
"vt 0.625000 0.750000\n"
"vt 0.625000 0.500000\n"
"vt 0.375000 1.000000\n"
"vt 0.375000 0.750000\n"
"vt 0.625000 0.000000\n"
"vt 0.375000 0.250000\n"
"vt 0.375000 0.000000\n"
"vt 0.375000 0.500000\n"
"vt 0.125000 0.750000\n"
"vt 0.125000 0.500000\n"
"vt 0.625000 0.250000\n"
"vt 0.875000 0.750000\n"
"vt 0.625000 1.000000\n"
"vn 0.0000 1.0000 0.0000\n"
"vn 0.0000 0.0000 1.0000\n"
"vn -1.0000 0.0000 0.0000\n"
"vn 0.0000 -1.0000 0.0000\n"
"vn 1.0000 0.0000 0.0000\n"
"vn 0.0000 0.0000 -1.0000\n"
"g Cube_Cube_Blue\n"
"usemtl Blue1\n"
"s off\n"
"f 1/3/5 4/5/5 2/9/5\n"
"f 1/3/5 3/2/5 4/5/5\n"
"f 7/6/3 5/12/3 6/7/3\n"
"f 7/6/3 6/7/3 8/8/3\n"
"usemtl Blue2\n"
"f 2/9/4 8/10/4 6/11/4\n"
"f 5/1/1 7/13/1 3/2/1\n"
"f 2/9/4 4/5/4 8/10/4\n"
"f 5/1/1 3/2/1 1/3/1\n"
"usemtl Blue3\n"
"f 3/2/2 7/14/2 8/4/2\n"
"f 5/12/6 2/9/6 6/7/6\n"
"f 3/2/2 8/4/2 4/5/2\n"
"f 5/12/6 1/3/6 2/9/6\n";


const std::string red_plane =
"# Blender v3.0.0 OBJ File: ''\n"
"# www.blender.org\n"
"mtllib red_plane.mtl\n"
"o Cube\n"
"v 1.000000 0.000000 -1.000000\n"
"v 1.000000 -1.000000 -1.000000\n"
"v 1.000000 0.000000 1.000000\n"
"v 1.000000 -1.000000 1.000000\n"
"v -1.000000 0.000000 -1.000000\n"
"v -1.000000 -1.000000 -1.000000\n"
"v -1.000000 0.000000 1.000000\n"
"v -1.000000 -1.000000 1.000000\n"
"vt 0.875000 0.500000\n"
"vt 0.625000 0.750000\n"
"vt 0.625000 0.500000\n"
"vt 0.375000 1.000000\n"
"vt 0.375000 0.750000\n"
"vt 0.625000 0.000000\n"
"vt 0.375000 0.250000\n"
"vt 0.375000 0.000000\n"
"vt 0.375000 0.500000\n"
"vt 0.125000 0.750000\n"
"vt 0.125000 0.500000\n"
"vt 0.625000 0.250000\n"
"vt 0.875000 0.750000\n"
"vt 0.625000 1.000000\n"
"vn 0.0000 1.0000 0.0000\n"
"vn 0.0000 0.0000 1.0000\n"
"vn -1.0000 0.0000 0.0000\n"
"vn 0.0000 -1.0000 0.0000\n"
"vn 1.0000 0.0000 0.0000\n"
"vn 0.0000 0.0000 -1.0000\n"
"g Cube_Cube_Red\n"
"usemtl Red1\n"
"s off\n"
"f 5/1/1 3/2/1 1/3/1\n"
"#f 3/2/2 8/4/2 4/5/2\n"
"#f 7/6/3 6/7/3 8/8/3\n"
"#f 2/9/4 8/10/4 6/11/4\n"
"#f 1/3/5 4/5/5 2/9/5\n"
"#f 5/12/6 2/9/6 6/7/6\n"
"f 5/1/1 7/13/1 3/2/1\n"
"#f 3/2/2 7/14/2 8/4/2\n"
"#f 7/6/3 5/12/3 6/7/3\n"
"#f 2/9/4 4/5/4 8/10/4\n"
"#f 1/3/5 3/2/5 4/5/5\n"
"#f 5/12/6 1/3/6 2/9/6\n"
"";


const std::string blue_sphere = 
"# Blender v3.0.0 OBJ File: ''\n"
"# www.blender.org\n"
"mtllib blue_sphere.mtl\n"
"o Cube\n"
"v -1.390453 -0.236388 7.592431\n"
"v -1.390453 -0.236388 7.729836\n"
"v 0.000000 -1.000000 0.000000\n"
"v 0.723607 -0.447220 0.525725\n"
"v -0.276388 -0.447220 0.850649\n"
"v -0.894426 -0.447216 0.000000\n"
"v -0.276388 -0.447220 -0.850649\n"
"v 0.723607 -0.447220 -0.525725\n"
"v 0.276388 0.447220 0.850649\n"
"v -0.723607 0.447220 0.525725\n"
"v -0.723607 0.447220 -0.525725\n"
"v 0.276388 0.447220 -0.850649\n"
"v 0.894426 0.447216 0.000000\n"
"v 0.000000 1.000000 0.000000\n"
"v -0.232822 -0.657519 0.716563\n"
"v -0.162456 -0.850654 0.499995\n"
"v -0.077607 -0.967950 0.238853\n"
"v 0.203181 -0.967950 0.147618\n"
"v 0.425323 -0.850654 0.309011\n"
"v 0.609547 -0.657519 0.442856\n"
"v 0.531941 -0.502302 0.681712\n"
"v 0.262869 -0.525738 0.809012\n"
"v -0.029639 -0.502302 0.864184\n"
"v 0.812729 -0.502301 -0.295238\n"
"v 0.850648 -0.525736 0.000000\n"
"v 0.812729 -0.502301 0.295238\n"
"v 0.203181 -0.967950 -0.147618\n"
"v 0.425323 -0.850654 -0.309011\n"
"v 0.609547 -0.657519 -0.442856\n"
"v -0.753442 -0.657515 0.000000\n"
"v -0.525730 -0.850652 0.000000\n"
"v -0.251147 -0.967949 0.000000\n"
"v -0.483971 -0.502302 0.716565\n"
"v -0.688189 -0.525736 0.499997\n"
"v -0.831051 -0.502299 0.238853\n"
"v -0.232822 -0.657519 -0.716563\n"
"v -0.162456 -0.850654 -0.499995\n"
"v -0.077607 -0.967950 -0.238853\n"
"v -0.831051 -0.502299 -0.238853\n"
"v -0.688189 -0.525736 -0.499997\n"
"v -0.483971 -0.502302 -0.716565\n"
"v -0.029639 -0.502302 -0.864184\n"
"v 0.262869 -0.525738 -0.809012\n"
"v 0.531941 -0.502302 -0.681712\n"
"v 0.956626 0.251149 0.147618\n"
"v 0.951058 -0.000000 0.309013\n"
"v 0.860698 -0.251151 0.442858\n"
"v 0.860698 -0.251151 -0.442858\n"
"v 0.951058 0.000000 -0.309013\n"
"v 0.956626 0.251149 -0.147618\n"
"v 0.155215 0.251152 0.955422\n"
"v 0.000000 -0.000000 1.000000\n"
"v -0.155215 -0.251152 0.955422\n"
"v 0.687159 -0.251152 0.681715\n"
"v 0.587786 0.000000 0.809017\n"
"v 0.436007 0.251152 0.864188\n"
"v -0.860698 0.251151 0.442858\n"
"v -0.951058 -0.000000 0.309013\n"
"v -0.956626 -0.251149 0.147618\n"
"v -0.436007 -0.251152 0.864188\n"
"v -0.587786 0.000000 0.809017\n"
"v -0.687159 0.251152 0.681715\n"
"v -0.687159 0.251152 -0.681715\n"
"v -0.587786 -0.000000 -0.809017\n"
"v -0.436007 -0.251152 -0.864188\n"
"v -0.956626 -0.251149 -0.147618\n"
"v -0.951058 0.000000 -0.309013\n"
"v -0.860698 0.251151 -0.442858\n"
"v 0.436007 0.251152 -0.864188\n"
"v 0.587786 -0.000000 -0.809017\n"
"v 0.687159 -0.251152 -0.681715\n"
"v -0.155215 -0.251152 -0.955422\n"
"v 0.000000 0.000000 -1.000000\n"
"v 0.155215 0.251152 -0.955422\n"
"v 0.831051 0.502299 0.238853\n"
"v 0.688189 0.525736 0.499997\n"
"v 0.483971 0.502302 0.716565\n"
"v 0.029639 0.502302 0.864184\n"
"v -0.262869 0.525738 0.809012\n"
"v -0.531941 0.502302 0.681712\n"
"v -0.812729 0.502301 0.295238\n"
"v -0.850648 0.525736 0.000000\n"
"v -0.812729 0.502301 -0.295238\n"
"v -0.531941 0.502302 -0.681712\n"
"v -0.262869 0.525738 -0.809012\n"
"v 0.029639 0.502302 -0.864184\n"
"v 0.483971 0.502302 -0.716565\n"
"v 0.688189 0.525736 -0.499997\n"
"v 0.831051 0.502299 -0.238853\n"
"v 0.077607 0.967950 0.238853\n"
"v 0.162456 0.850654 0.499995\n"
"v 0.232822 0.657519 0.716563\n"
"v 0.753442 0.657515 0.000000\n"
"v 0.525730 0.850652 0.000000\n"
"v 0.251147 0.967949 0.000000\n"
"v -0.203181 0.967950 0.147618\n"
"v -0.425323 0.850654 0.309011\n"
"v -0.609547 0.657519 0.442856\n"
"v -0.203181 0.967950 -0.147618\n"
"v -0.425323 0.850654 -0.309011\n"
"v -0.609547 0.657519 -0.442856\n"
"v 0.077607 0.967950 -0.238853\n"
"v 0.162456 0.850654 -0.499995\n"
"v 0.232822 0.657519 -0.716563\n"
"v 0.361800 0.894429 -0.262863\n"
"v 0.638194 0.723610 -0.262864\n"
"v 0.447209 0.723612 -0.525728\n"
"v -0.138197 0.894430 -0.425319\n"
"v -0.052790 0.723612 -0.688185\n"
"v -0.361804 0.723612 -0.587778\n"
"v -0.447210 0.894429 0.000000\n"
"v -0.670817 0.723611 -0.162457\n"
"v -0.670817 0.723611 0.162457\n"
"v -0.138197 0.894430 0.425319\n"
"v -0.361804 0.723612 0.587778\n"
"v -0.052790 0.723612 0.688185\n"
"v 0.361800 0.894429 0.262863\n"
"v 0.447209 0.723612 0.525728\n"
"v 0.638194 0.723610 0.262864\n"
"v 0.861804 0.276396 -0.425322\n"
"v 0.809019 0.000000 -0.587782\n"
"v 0.670821 0.276397 -0.688189\n"
"v -0.138199 0.276397 -0.951055\n"
"v -0.309016 -0.000000 -0.951057\n"
"v -0.447215 0.276397 -0.850649\n"
"v -0.947213 0.276396 -0.162458\n"
"v -1.000000 0.000001 0.000000\n"
"v -0.947213 0.276397 0.162458\n"
"v -0.447216 0.276397 0.850648\n"
"v -0.309017 -0.000001 0.951056\n"
"v -0.138199 0.276397 0.951055\n"
"v 0.670820 0.276396 0.688190\n"
"v 0.809019 -0.000002 0.587783\n"
"v 0.861804 0.276394 0.425323\n"
"v 0.309017 -0.000000 -0.951056\n"
"v 0.447216 -0.276398 -0.850648\n"
"v 0.138199 -0.276398 -0.951055\n"
"v -0.809018 -0.000000 -0.587783\n"
"v -0.670819 -0.276397 -0.688191\n"
"v -0.861803 -0.276396 -0.425324\n"
"v -0.809018 0.000000 0.587783\n"
"v -0.861803 -0.276396 0.425324\n"
"v -0.670819 -0.276397 0.688191\n"
"v 0.309017 0.000000 0.951056\n"
"v 0.138199 -0.276398 0.951055\n"
"v 0.447216 -0.276398 0.850648\n"
"v 1.000000 0.000000 0.000000\n"
"v 0.947213 -0.276396 0.162458\n"
"v 0.947213 -0.276396 -0.162458\n"
"v 0.361803 -0.723612 -0.587779\n"
"v 0.138197 -0.894429 -0.425321\n"
"v 0.052789 -0.723611 -0.688186\n"
"v -0.447211 -0.723612 -0.525727\n"
"v -0.361801 -0.894429 -0.262863\n"
"v -0.638195 -0.723609 -0.262863\n"
"v -0.638195 -0.723609 0.262864\n"
"v -0.361801 -0.894428 0.262864\n"
"v -0.447211 -0.723610 0.525729\n"
"v 0.670817 -0.723611 -0.162457\n"
"v 0.670818 -0.723610 0.162458\n"
"v 0.447211 -0.894428 0.000001\n"
"v 0.052790 -0.723612 0.688185\n"
"v 0.138199 -0.894429 0.425321\n"
"v 0.361805 -0.723611 0.587779\n"
"vt 0.181819 0.000000\n"
"vt 0.204546 0.039365\n"
"vt 0.159092 0.039365\n"
"vt 0.272728 0.157461\n"
"vt 0.295455 0.118096\n"
"vt 0.318182 0.157461\n"
"vt 0.909091 0.000000\n"
"vt 0.931818 0.039365\n"
"vt 0.886364 0.039365\n"
"vt 0.727273 0.000000\n"
"vt 0.750000 0.039365\n"
"vt 0.704546 0.039365\n"
"vt 0.545455 0.000000\n"
"vt 0.568182 0.039365\n"
"vt 0.522728 0.039365\n"
"vt 0.295455 0.196826\n"
"vt 0.090910 0.157461\n"
"vt 0.136364 0.157461\n"
"vt 0.113637 0.196826\n"
"vt 0.818182 0.157461\n"
"vt 0.863636 0.157461\n"
"vt 0.840909 0.196826\n"
"vt 0.636364 0.157461\n"
"vt 0.681818 0.157461\n"
"vt 0.659091 0.196826\n"
"vt 0.454546 0.157461\n"
"vt 0.500000 0.157461\n"
"vt 0.477273 0.196826\n"
"vt 0.250001 0.196826\n"
"vt 0.068182 0.196826\n"
"vt 0.795455 0.196826\n"
"vt 0.613637 0.196826\n"
"vt 0.431819 0.196826\n"
"vt 0.181819 0.314921\n"
"vt 0.227273 0.314921\n"
"vt 0.204546 0.354286\n"
"vt 0.000000 0.314921\n"
"vt 0.045455 0.314921\n"
"vt 0.022727 0.354286\n"
"vt 0.727273 0.314921\n"
"vt 0.772727 0.314921\n"
"vt 0.750000 0.354286\n"
"vt 0.545455 0.314921\n"
"vt 0.590909 0.314921\n"
"vt 0.568182 0.354286\n"
"vt 0.363637 0.314921\n"
"vt 0.409091 0.314921\n"
"vt 0.386364 0.354286\n"
"vt 0.431819 0.433017\n"
"vt 0.477273 0.433017\n"
"vt 0.454546 0.472382\n"
"vt 0.500000 0.314921\n"
"vt 0.522728 0.354286\n"
"vt 0.613637 0.433017\n"
"vt 0.659091 0.433017\n"
"vt 0.636364 0.472382\n"
"vt 0.681818 0.314921\n"
"vt 0.704546 0.354286\n"
"vt 0.795455 0.433017\n"
"vt 0.840909 0.433017\n"
"vt 0.818182 0.472382\n"
"vt 0.863636 0.314921\n"
"vt 0.909091 0.314921\n"
"vt 0.886364 0.354286\n"
"vt 0.068182 0.433017\n"
"vt 0.113637 0.433017\n"
"vt 0.090910 0.472382\n"
"vt 0.136364 0.314921\n"
"vt 0.159092 0.354286\n"
"vt 0.250001 0.433017\n"
"vt 0.295455 0.433017\n"
"vt 0.272728 0.472382\n"
"vt 0.318182 0.314921\n"
"vt 0.340910 0.354286\n"
"vt 0.386364 0.275556\n"
"vt 0.522728 0.275556\n"
"vt 0.568182 0.275556\n"
"vt 0.704546 0.275556\n"
"vt 0.750000 0.275556\n"
"vt 0.886364 0.275556\n"
"vt 0.022727 0.275556\n"
"vt 0.159092 0.275556\n"
"vt 0.204546 0.275556\n"
"vt 0.340910 0.275556\n"
"vt 0.590909 0.157461\n"
"vt 0.772727 0.157461\n"
"vt 0.931818 0.275556\n"
"vt 0.954545 0.157461\n"
"vt 1.000000 0.157461\n"
"vt 0.977273 0.196826\n"
"vt 0.227274 0.157461\n"
"vt 0.409092 0.157461\n"
"vt 0.477273 0.118096\n"
"vt 0.613637 0.118096\n"
"vt 0.659091 0.118096\n"
"vt 0.795455 0.118096\n"
"vt 0.840909 0.118096\n"
"vt 0.977273 0.118096\n"
"vt 0.431819 0.118096\n"
"vt 0.340910 0.039365\n"
"vt 0.363637 0.000000\n"
"vt 0.386364 0.039365\n"
"vt 0.113637 0.118096\n"
"vt 0.250001 0.118096\n"
"vt 0.409091 0.393651\n"
"vt 0.454546 0.393651\n"
"vt 0.431819 0.354286\n"
"vt 0.500000 0.393651\n"
"vt 0.477273 0.354286\n"
"vt 0.454546 0.314921\n"
"vt 0.590909 0.393651\n"
"vt 0.636364 0.393651\n"
"vt 0.613637 0.354286\n"
"vt 0.681818 0.393651\n"
"vt 0.659091 0.354286\n"
"vt 0.636364 0.314921\n"
"vt 0.772727 0.393651\n"
"vt 0.818182 0.393651\n"
"vt 0.795455 0.354286\n"
"vt 0.863636 0.393651\n"
"vt 0.840909 0.354286\n"
"vt 0.818182 0.314921\n"
"vt 0.045455 0.393651\n"
"vt 0.090910 0.393651\n"
"vt 0.068182 0.354286\n"
"vt 0.136365 0.393651\n"
"vt 0.113637 0.354286\n"
"vt 0.090909 0.314921\n"
"vt 0.227273 0.393651\n"
"vt 0.272728 0.393651\n"
"vt 0.250001 0.354286\n"
"vt 0.318182 0.393651\n"
"vt 0.295455 0.354286\n"
"vt 0.272728 0.314921\n"
"vt 0.409091 0.236191\n"
"vt 0.431819 0.275556\n"
"vt 0.454546 0.236191\n"
"vt 0.477273 0.275556\n"
"vt 0.500000 0.236191\n"
"vt 0.590909 0.236191\n"
"vt 0.613637 0.275556\n"
"vt 0.636364 0.236191\n"
"vt 0.659091 0.275556\n"
"vt 0.681818 0.236191\n"
"vt 0.772727 0.236191\n"
"vt 0.795455 0.275556\n"
"vt 0.818182 0.236191\n"
"vt 0.840909 0.275556\n"
"vt 0.863636 0.236191\n"
"vt 0.045455 0.236191\n"
"vt 0.068182 0.275556\n"
"vt 0.090910 0.236191\n"
"vt 0.113637 0.275556\n"
"vt 0.136364 0.236191\n"
"vt 0.227273 0.236191\n"
"vt 0.250001 0.275556\n"
"vt 0.272728 0.236191\n"
"vt 0.295455 0.275556\n"
"vt 0.318182 0.236191\n"
"vt 0.545455 0.236191\n"
"vt 0.522728 0.196826\n"
"vt 0.568182 0.196826\n"
"vt 0.545455 0.157461\n"
"vt 0.727273 0.236191\n"
"vt 0.704546 0.196826\n"
"vt 0.750000 0.196826\n"
"vt 0.727273 0.157461\n"
"vt 0.909091 0.236191\n"
"vt 0.886364 0.196826\n"
"vt 0.954545 0.236191\n"
"vt 0.931818 0.196826\n"
"vt 0.909091 0.157461\n"
"vt 0.181819 0.236191\n"
"vt 0.159092 0.196826\n"
"vt 0.204546 0.196826\n"
"vt 0.181819 0.157461\n"
"vt 0.363637 0.236191\n"
"vt 0.340910 0.196826\n"
"vt 0.386364 0.196826\n"
"vt 0.363637 0.157461\n"
"vt 0.500000 0.078731\n"
"vt 0.522728 0.118096\n"
"vt 0.545455 0.078731\n"
"vt 0.568182 0.118096\n"
"vt 0.590909 0.078731\n"
"vt 0.681818 0.078731\n"
"vt 0.704546 0.118096\n"
"vt 0.727273 0.078731\n"
"vt 0.750000 0.118096\n"
"vt 0.772727 0.078731\n"
"vt 0.863636 0.078731\n"
"vt 0.886364 0.118096\n"
"vt 0.909091 0.078731\n"
"vt 0.931818 0.118096\n"
"vt 0.954545 0.078731\n"
"vt 0.386364 0.118096\n"
"vt 0.340910 0.118096\n"
"vt 0.409091 0.078731\n"
"vt 0.363637 0.078730\n"
"vt 0.318182 0.078731\n"
"vt 0.136365 0.078731\n"
"vt 0.159092 0.118096\n"
"vt 0.181819 0.078731\n"
"vt 0.204546 0.118096\n"
"vt 0.227273 0.078731\n"
"vn 0.0482 -0.9878 0.1482\n"
"vn 0.7230 -0.5545 0.4121\n"
"vn -0.1261 -0.9878 0.0916\n"
"vn -0.1261 -0.9878 -0.0916\n"
"vn 0.0482 -0.9878 -0.1482\n"
"vn 0.8193 -0.3987 0.4121\n"
"vn -0.1387 -0.3987 0.9065\n"
"vn -0.9050 -0.3987 0.1482\n"
"vn -0.4206 -0.3987 -0.8149\n"
"vn 0.6451 -0.3987 -0.6519\n"
"vn 0.7711 -0.3024 0.5603\n"
"vn -0.2945 -0.3024 0.9065\n"
"vn -0.9532 -0.3024 0.0000\n"
"vn -0.2945 -0.3024 -0.9065\n"
"vn 0.7711 -0.3024 -0.5603\n"
"vn 0.3427 0.5545 0.7583\n"
"vn -0.6153 0.5545 0.5603\n"
"vn -0.7230 0.5545 -0.4121\n"
"vn 0.1685 0.5545 -0.8149\n"
"vn 0.8271 0.5545 -0.0916\n"
"vn 0.1261 0.9878 -0.0916\n"
"vn 0.3427 0.5545 -0.7583\n"
"vn -0.0482 0.9878 -0.1482\n"
"vn -0.6153 0.5545 -0.5603\n"
"vn -0.1558 0.9878 0.0000\n"
"vn -0.7230 0.5545 0.4121\n"
"vn -0.0482 0.9878 0.1482\n"
"vn 0.1685 0.5545 0.8149\n"
"vn 0.1261 0.9878 0.0916\n"
"vn 0.8271 0.5545 0.0916\n"
"vn 0.9050 0.3987 -0.1482\n"
"vn 0.4206 0.3987 -0.8149\n"
"vn 0.1387 0.3987 -0.9065\n"
"vn -0.6451 0.3987 -0.6519\n"
"vn -0.8193 0.3987 -0.4121\n"
"vn -0.8193 0.3987 0.4121\n"
"vn -0.6451 0.3987 0.6519\n"
"vn 0.1387 0.3987 0.9065\n"
"vn 0.4206 0.3987 0.8149\n"
"vn 0.9050 0.3987 0.1482\n"
"vn 0.2945 0.3024 -0.9065\n"
"vn -0.1387 -0.3987 -0.9065\n"
"vn -0.7711 0.3024 -0.5603\n"
"vn -0.9050 -0.3987 -0.1482\n"
"vn -0.7711 0.3024 0.5603\n"
"vn -0.4206 -0.3987 0.8149\n"
"vn 0.2945 0.3024 0.9065\n"
"vn 0.6451 -0.3987 0.6519\n"
"vn 0.9532 0.3024 0.0000\n"
"vn 0.8193 -0.3987 -0.4121\n"
"vn 0.6153 -0.5545 -0.5603\n"
"vn -0.1685 -0.5545 -0.8149\n"
"vn -0.3427 -0.5545 -0.7583\n"
"vn -0.8271 -0.5545 -0.0916\n"
"vn -0.8271 -0.5545 0.0916\n"
"vn -0.3427 -0.5545 0.7583\n"
"vn 0.7230 -0.5545 -0.4121\n"
"vn 0.1558 -0.9878 0.0000\n"
"vn -0.1685 -0.5545 0.8149\n"
"vn 0.6153 -0.5545 0.5603\n"
"vn 0.3912 0.9158 -0.0914\n"
"vn 0.6441 0.7594 -0.0915\n"
"vn 0.2334 0.9575 -0.1696\n"
"vn 0.2079 0.9158 -0.3438\n"
"vn 0.5168 0.8363 -0.1830\n"
"vn 0.4911 0.7947 -0.3568\n"
"vn 0.3338 0.8363 -0.4350\n"
"vn 0.2860 0.7594 -0.5843\n"
"vn 0.7520 0.6369 -0.1696\n"
"vn 0.7261 0.5955 -0.3438\n"
"vn 0.5987 0.6726 -0.4350\n"
"vn 0.5513 0.5955 -0.5843\n"
"vn 0.3936 0.6369 -0.6628\n"
"vn 0.0339 0.9158 -0.4003\n"
"vn 0.1121 0.7594 -0.6409\n"
"vn -0.0891 0.9575 -0.2743\n"
"vn -0.2627 0.9158 -0.3039\n"
"vn -0.0144 0.8363 -0.5481\n"
"vn -0.1876 0.7947 -0.5773\n"
"vn -0.3105 0.8363 -0.4519\n"
"vn -0.4674 0.7594 -0.4526\n"
"vn 0.0711 0.6369 -0.7676\n"
"vn -0.1026 0.5955 -0.7968\n"
"vn -0.2287 0.6726 -0.7038\n"
"vn -0.3854 0.5955 -0.7049\n"
"vn -0.5087 0.6369 -0.5792\n"
"vn -0.3702 0.9158 -0.1560\n"
"vn -0.5749 0.7594 -0.3046\n"
"vn -0.2885 0.9575 0.0000\n"
"vn -0.3702 0.9158 0.1560\n"
"vn -0.5257 0.8363 -0.1557\n"
"vn -0.6071 0.7947 0.0000\n"
"vn -0.5257 0.8363 0.1557\n"
"vn -0.5749 0.7594 0.3046\n"
"vn -0.7081 0.6369 -0.3049\n"
"vn -0.7895 0.5955 -0.1487\n"
"vn -0.7400 0.6726 0.0000\n"
"vn -0.7895 0.5955 0.1487\n"
"vn -0.7081 0.6369 0.3049\n"
"vn -0.2627 0.9158 0.3039\n"
"vn -0.4674 0.7594 0.4526\n"
"vn -0.0891 0.9575 0.2743\n"
"vn 0.0339 0.9158 0.4003\n"
"vn -0.3105 0.8363 0.4519\n"
"vn -0.1876 0.7947 0.5773\n"
"vn -0.0144 0.8363 0.5481\n"
"vn 0.1121 0.7594 0.6409\n"
"vn -0.5087 0.6369 0.5792\n"
"vn -0.3854 0.5955 0.7049\n"
"vn -0.2287 0.6726 0.7038\n"
"vn -0.1026 0.5955 0.7968\n"
"vn 0.0711 0.6369 0.7676\n"
"vn 0.2079 0.9158 0.3438\n"
"vn 0.2860 0.7594 0.5843\n"
"vn 0.2334 0.9575 0.1696\n"
"vn 0.3912 0.9158 0.0915\n"
"vn 0.3338 0.8363 0.4350\n"
"vn 0.4911 0.7947 0.3568\n"
"vn 0.5168 0.8363 0.1830\n"
"vn 0.6441 0.7594 0.0915\n"
"vn 0.3936 0.6369 0.6628\n"
"vn 0.5513 0.5955 0.5843\n"
"vn 0.5987 0.6726 0.4350\n"
"vn 0.7261 0.5955 0.3438\n"
"vn 0.7520 0.6369 0.1696\n"
"vn 0.9366 0.1745 -0.3039\n"
"vn 0.8883 -0.0784 -0.4526\n"
"vn 0.8963 0.3485 -0.2743\n"
"vn 0.8039 0.4399 -0.4003\n"
"vn 0.8869 0.0962 -0.4519\n"
"vn 0.7947 0.1876 -0.5773\n"
"vn 0.7544 0.3611 -0.5481\n"
"vn 0.6291 0.4399 -0.6409\n"
"vn 0.7972 -0.1702 -0.5792\n"
"vn 0.7049 -0.0784 -0.7049\n"
"vn 0.7038 0.0962 -0.7038\n"
"vn 0.5785 0.1745 -0.7968\n"
"vn 0.5379 0.3485 -0.7676\n"
"vn 0.0004 0.1745 -0.9846\n"
"vn -0.1560 -0.0784 -0.9846\n"
"vn 0.0160 0.3485 -0.9372\n"
"vn -0.1323 0.4399 -0.8883\n"
"vn -0.1557 0.0962 -0.9831\n"
"vn -0.3035 0.1876 -0.9342\n"
"vn -0.2882 0.3611 -0.8869\n"
"vn -0.4151 0.4399 -0.7964\n"
"vn -0.3045 -0.1702 -0.9372\n"
"vn -0.4526 -0.0784 -0.8883\n"
"vn -0.4519 0.0962 -0.8869\n"
"vn -0.5791 0.1745 -0.7964\n"
"vn -0.5638 0.3485 -0.7488\n"
"vn -0.9363 0.1745 -0.3046\n"
"vn -0.9846 -0.0784 -0.1560\n"
"vn -0.8864 0.3485 -0.3049\n"
"vn -0.8857 0.4399 -0.1487\n"
"vn -0.9831 0.0962 -0.1557\n"
"vn -0.9822 0.1876 0.0000\n"
"vn -0.9325 0.3611 0.0000\n"
"vn -0.8857 0.4399 0.1487\n"
"vn -0.9854 -0.1702 0.0000\n"
"vn -0.9846 -0.0784 0.1560\n"
"vn -0.9831 0.0962 0.1557\n"
"vn -0.9363 0.1745 0.3046\n"
"vn -0.8864 0.3485 0.3049\n"
"vn -0.5791 0.1745 0.7964\n"
"vn -0.4526 -0.0784 0.8883\n"
"vn -0.5638 0.3485 0.7488\n"
"vn -0.4151 0.4399 0.7964\n"
"vn -0.4519 0.0962 0.8869\n"
"vn -0.3035 0.1876 0.9342\n"
"vn -0.2882 0.3611 0.8869\n"
"vn -0.1323 0.4399 0.8883\n"
"vn -0.3045 -0.1702 0.9372\n"
"vn -0.1560 -0.0784 0.9846\n"
"vn -0.1557 0.0962 0.9831\n"
"vn 0.0004 0.1745 0.9846\n"
"vn 0.0160 0.3485 0.9372\n"
"vn 0.5785 0.1745 0.7968\n"
"vn 0.7049 -0.0784 0.7049\n"
"vn 0.5379 0.3485 0.7676\n"
"vn 0.6291 0.4399 0.6409\n"
"vn 0.7038 0.0962 0.7038\n"
"vn 0.7947 0.1876 0.5773\n"
"vn 0.7544 0.3611 0.5481\n"
"vn 0.8039 0.4399 0.4003\n"
"vn 0.7972 -0.1702 0.5792\n"
"vn 0.8883 -0.0784 0.4526\n"
"vn 0.8869 0.0962 0.4519\n"
"vn 0.9366 0.1745 0.3039\n"
"vn 0.8963 0.3485 0.2744\n"
"vn 0.4526 0.0784 -0.8883\n"
"vn 0.5791 -0.1745 -0.7964\n"
"vn 0.3045 0.1702 -0.9372\n"
"vn 0.1560 0.0784 -0.9846\n"
"vn 0.4519 -0.0962 -0.8869\n"
"vn 0.3035 -0.1876 -0.9342\n"
"vn 0.1557 -0.0962 -0.9831\n"
"vn -0.0004 -0.1745 -0.9846\n"
"vn 0.5638 -0.3485 -0.7488\n"
"vn 0.4151 -0.4399 -0.7964\n"
"vn 0.2882 -0.3611 -0.8869\n"
"vn 0.1323 -0.4399 -0.8883\n"
"vn -0.0160 -0.3485 -0.9372\n"
"vn -0.7049 0.0784 -0.7049\n"
"vn -0.5785 -0.1745 -0.7968\n"
"vn -0.7972 0.1702 -0.5792\n"
"vn -0.8883 0.0784 -0.4526\n"
"vn -0.7038 -0.0962 -0.7038\n"
"vn -0.7947 -0.1876 -0.5773\n"
"vn -0.8869 -0.0962 -0.4519\n"
"vn -0.9366 -0.1745 -0.3039\n"
"vn -0.5379 -0.3485 -0.7676\n"
"vn -0.6291 -0.4399 -0.6409\n"
"vn -0.7544 -0.3611 -0.5481\n"
"vn -0.8039 -0.4399 -0.4003\n"
"vn -0.8963 -0.3485 -0.2744\n"
"vn -0.8883 0.0784 0.4526\n"
"vn -0.9366 -0.1745 0.3039\n"
"vn -0.7972 0.1702 0.5792\n"
"vn -0.7049 0.0784 0.7049\n"
"vn -0.8869 -0.0962 0.4519\n"
"vn -0.7947 -0.1876 0.5774\n"
"vn -0.7038 -0.0962 0.7038\n"
"vn -0.5785 -0.1745 0.7968\n"
"vn -0.8963 -0.3485 0.2744\n"
"vn -0.8039 -0.4399 0.4003\n"
"vn -0.7544 -0.3611 0.5481\n"
"vn -0.6291 -0.4399 0.6409\n"
"vn -0.5379 -0.3485 0.7676\n"
"vn 0.1560 0.0784 0.9846\n"
"vn -0.0004 -0.1745 0.9846\n"
"vn 0.3045 0.1702 0.9372\n"
"vn 0.4526 0.0784 0.8883\n"
"vn 0.1557 -0.0962 0.9831\n"
"vn 0.3035 -0.1876 0.9342\n"
"vn 0.4519 -0.0962 0.8869\n"
"vn 0.5791 -0.1745 0.7964\n"
"vn -0.0160 -0.3485 0.9372\n"
"vn 0.1323 -0.4399 0.8883\n"
"vn 0.2882 -0.3611 0.8869\n"
"vn 0.4151 -0.4399 0.7964\n"
"vn 0.5638 -0.3485 0.7488\n"
"vn 0.9846 0.0784 0.1560\n"
"vn 0.9363 -0.1745 0.3046\n"
"vn 0.9854 0.1702 0.0000\n"
"vn 0.9846 0.0784 -0.1560\n"
"vn 0.9831 -0.0962 0.1557\n"
"vn 0.9822 -0.1876 0.0000\n"
"vn 0.9831 -0.0962 -0.1557\n"
"vn 0.9363 -0.1745 -0.3046\n"
"vn 0.8864 -0.3485 0.3049\n"
"vn 0.8857 -0.4399 0.1487\n"
"vn 0.9325 -0.3611 0.0000\n"
"vn 0.8857 -0.4399 -0.1487\n"
"vn 0.8864 -0.3485 -0.3049\n"
"vn 0.4674 -0.7594 -0.4526\n"
"vn 0.2627 -0.9158 -0.3039\n"
"vn 0.5087 -0.6369 -0.5792\n"
"vn 0.3854 -0.5955 -0.7049\n"
"vn 0.3105 -0.8363 -0.4519\n"
"vn 0.1876 -0.7947 -0.5773\n"
"vn 0.2287 -0.6726 -0.7038\n"
"vn 0.1026 -0.5955 -0.7968\n"
"vn 0.0891 -0.9575 -0.2743\n"
"vn -0.0339 -0.9158 -0.4003\n"
"vn 0.0144 -0.8363 -0.5481\n"
"vn -0.1121 -0.7594 -0.6409\n"
"vn -0.0711 -0.6369 -0.7676\n"
"vn -0.2860 -0.7594 -0.5843\n"
"vn -0.2079 -0.9158 -0.3438\n"
"vn -0.3936 -0.6369 -0.6628\n"
"vn -0.5513 -0.5955 -0.5843\n"
"vn -0.3338 -0.8363 -0.4350\n"
"vn -0.4911 -0.7947 -0.3568\n"
"vn -0.5987 -0.6726 -0.4350\n"
"vn -0.7261 -0.5955 -0.3438\n"
"vn -0.2334 -0.9575 -0.1696\n"
"vn -0.3912 -0.9158 -0.0914\n"
"vn -0.5168 -0.8363 -0.1830\n"
"vn -0.6441 -0.7594 -0.0914\n"
"vn -0.7520 -0.6369 -0.1696\n"
"vn -0.6441 -0.7594 0.0915\n"
"vn -0.3912 -0.9158 0.0915\n"
"vn -0.7520 -0.6369 0.1696\n"
"vn -0.7261 -0.5955 0.3438\n"
"vn -0.5168 -0.8363 0.1830\n"
"vn -0.4911 -0.7947 0.3568\n"
"vn -0.5987 -0.6726 0.4350\n"
"vn -0.5513 -0.5955 0.5843\n"
"vn -0.2334 -0.9575 0.1696\n"
"vn -0.2079 -0.9158 0.3438\n"
"vn -0.3338 -0.8363 0.4350\n"
"vn -0.2860 -0.7594 0.5843\n"
"vn -0.3936 -0.6369 0.6628\n"
"vn 0.7895 -0.5955 -0.1487\n"
"vn 0.7895 -0.5955 0.1487\n"
"vn 0.7081 -0.6369 -0.3049\n"
"vn 0.5749 -0.7594 -0.3046\n"
"vn 0.7400 -0.6726 -0.0000\n"
"vn 0.6071 -0.7947 0.0000\n"
"vn 0.5257 -0.8363 -0.1557\n"
"vn 0.3702 -0.9158 -0.1559\n"
"vn 0.7081 -0.6369 0.3049\n"
"vn 0.5749 -0.7594 0.3046\n"
"vn 0.5257 -0.8363 0.1557\n"
"vn 0.3702 -0.9158 0.1560\n"
"vn 0.2885 -0.9575 0.0000\n"
"vn -0.1121 -0.7594 0.6409\n"
"vn -0.0339 -0.9158 0.4003\n"
"vn -0.0711 -0.6369 0.7676\n"
"vn 0.1026 -0.5955 0.7968\n"
"vn 0.0144 -0.8363 0.5481\n"
"vn 0.1876 -0.7947 0.5773\n"
"vn 0.2287 -0.6726 0.7038\n"
"vn 0.3854 -0.5955 0.7049\n"
"vn 0.0891 -0.9575 0.2744\n"
"vn 0.2627 -0.9158 0.3039\n"
"vn 0.3105 -0.8363 0.4519\n"
"vn 0.4674 -0.7594 0.4526\n"
"vn 0.5087 -0.6369 0.5792\n"
"usemtl Blue1\n"
"s off\n"
"f 3/1/1 18/2/1 17/3/1\n"
"f 4/4/2 20/5/2 26/6/2\n"
"f 3/7/3 17/8/3 32/9/3\n"
"f 3/10/4 32/11/4 38/12/4\n"
"f 3/13/5 38/14/5 27/15/5\n"
"f 4/4/6 26/6/6 47/16/6\n"
"f 5/17/7 23/18/7 53/19/7\n"
"f 6/20/8 35/21/8 59/22/8\n"
"f 7/23/9 41/24/9 65/25/9\n"
"f 8/26/10 44/27/10 71/28/10\n"
"f 4/4/11 47/16/11 54/29/11\n"
"f 5/17/12 53/19/12 60/30/12\n"
"f 6/20/13 59/22/13 66/31/13\n"
"f 7/23/14 65/25/14 72/32/14\n"
"f 8/26/15 71/28/15 48/33/15\n"
"f 9/34/16 77/35/16 92/36/16\n"
"f 10/37/17 80/38/17 98/39/17\n"
"f 11/40/18 83/41/18 101/42/18\n"
"f 12/43/19 86/44/19 104/45/19\n"
"f 13/46/20 89/47/20 93/48/20\n"
"f 95/49/21 102/50/21 14/51/21\n"
"f 87/52/22 12/43/22 104/53/22\n"
"f 102/54/23 99/55/23 14/56/23\n"
"f 84/57/24 11/40/24 101/58/24\n"
"f 99/59/25 96/60/25 14/61/25\n"
"f 81/62/26 10/63/26 98/64/26\n"
"f 96/65/27 90/66/27 14/67/27\n"
"f 78/68/28 9/34/28 92/69/28\n"
"f 90/70/29 95/71/29 14/72/29\n"
"f 75/73/30 13/46/30 93/74/30\n"
"f 50/75/31 89/47/31 13/46/31\n"
"f 69/76/32 12/43/32 87/52/32\n"
"f 74/77/33 86/44/33 12/43/33\n"
"f 63/78/34 11/40/34 84/57/34\n"
"f 68/79/35 83/41/35 11/40/35\n"
"f 57/80/36 10/63/36 81/62/36\n"
"f 62/81/37 80/38/37 10/37/37\n"
"f 51/82/38 9/34/38 78/68/38\n"
"f 56/83/39 77/35/39 9/34/39\n"
"f 45/84/40 13/46/40 75/73/40\n"
"f 69/76/41 74/77/41 12/43/41\n"
"f 42/85/42 7/23/42 72/32/42\n"
"f 63/78/43 68/79/43 11/40/43\n"
"f 39/86/44 6/20/44 66/31/44\n"
"f 57/80/45 62/87/45 10/63/45\n"
"f 33/88/46 5/89/46 60/90/46\n"
"f 51/82/47 56/83/47 9/34/47\n"
"f 21/91/48 4/4/48 54/29/48\n"
"f 45/84/49 50/75/49 13/46/49\n"
"f 24/92/50 8/26/50 48/33/50\n"
"f 29/93/51 44/27/51 8/26/51\n"
"f 36/94/52 7/23/52 42/85/52\n"
"f 36/95/53 41/24/53 7/23/53\n"
"f 30/96/54 6/20/54 39/86/54\n"
"f 30/97/55 35/21/55 6/20/55\n"
"f 15/98/56 5/89/56 33/88/56\n"
"f 24/92/57 29/99/57 8/26/57\n"
"f 18/100/58 3/101/58 27/102/58\n"
"f 15/103/59 23/18/59 5/17/59\n"
"f 20/104/60 4/4/60 21/91/60\n"
"usemtl Blue2\n"
"f 94/105/61 105/106/61 95/49/61\n"
"f 93/48/62 106/107/62 94/105/62\n"
"f 95/49/63 105/106/63 102/50/63\n"
"f 105/106/64 103/108/64 102/50/64\n"
"f 94/105/65 106/107/65 105/106/65\n"
"f 106/107/66 107/109/66 105/106/66\n"
"f 105/106/67 107/109/67 103/108/67\n"
"f 107/109/68 104/53/68 103/108/68\n"
"f 93/48/69 89/47/69 106/107/69\n"
"f 89/47/70 88/110/70 106/107/70\n"
"f 106/107/71 88/110/71 107/109/71\n"
"f 88/110/72 87/52/72 107/109/72\n"
"f 107/109/73 87/52/73 104/53/73\n"
"f 103/111/74 108/112/74 102/54/74\n"
"f 104/45/75 109/113/75 103/111/75\n"
"f 102/54/76 108/112/76 99/55/76\n"
"f 108/112/77 100/114/77 99/55/77\n"
"f 103/111/78 109/113/78 108/112/78\n"
"f 109/113/79 110/115/79 108/112/79\n"
"f 108/112/80 110/115/80 100/114/80\n"
"f 110/115/81 101/58/81 100/114/81\n"
"f 104/45/82 86/44/82 109/113/82\n"
"f 86/44/83 85/116/83 109/113/83\n"
"f 109/113/84 85/116/84 110/115/84\n"
"f 85/116/85 84/57/85 110/115/85\n"
"f 110/115/86 84/57/86 101/58/86\n"
"f 100/117/87 111/118/87 99/59/87\n"
"f 101/42/88 112/119/88 100/117/88\n"
"f 99/59/89 111/118/89 96/60/89\n"
"f 111/118/90 97/120/90 96/60/90\n"
"f 100/117/91 112/119/91 111/118/91\n"
"f 112/119/92 113/121/92 111/118/92\n"
"f 111/118/93 113/121/93 97/120/93\n"
"f 113/121/94 98/64/94 97/120/94\n"
"f 101/42/95 83/41/95 112/119/95\n"
"f 83/41/96 82/122/96 112/119/96\n"
"f 112/119/97 82/122/97 113/121/97\n"
"f 82/122/98 81/62/98 113/121/98\n"
"f 113/121/99 81/62/99 98/64/99\n"
"f 97/123/100 114/124/100 96/65/100\n"
"f 98/39/101 115/125/101 97/123/101\n"
"f 96/65/102 114/124/102 90/66/102\n"
"f 114/124/103 91/126/103 90/66/103\n"
"f 97/123/104 115/125/104 114/124/104\n"
"f 115/125/105 116/127/105 114/124/105\n"
"f 114/124/106 116/127/106 91/126/106\n"
"f 116/127/107 92/69/107 91/126/107\n"
"f 98/39/108 80/38/108 115/125/108\n"
"f 80/38/109 79/128/109 115/125/109\n"
"f 115/125/110 79/128/110 116/127/110\n"
"f 79/128/111 78/68/111 116/127/111\n"
"f 116/127/112 78/68/112 92/69/112\n"
"f 91/129/113 117/130/113 90/70/113\n"
"f 92/36/114 118/131/114 91/129/114\n"
"f 90/70/115 117/130/115 95/71/115\n"
"f 117/130/116 94/132/116 95/71/116\n"
"f 91/129/117 118/131/117 117/130/117\n"
"f 118/131/118 119/133/118 117/130/118\n"
"f 117/130/119 119/133/119 94/132/119\n"
"f 119/133/120 93/74/120 94/132/120\n"
"f 92/36/121 77/35/121 118/131/121\n"
"f 77/35/122 76/134/122 118/131/122\n"
"f 118/131/123 76/134/123 119/133/123\n"
"f 76/134/124 75/73/124 119/133/124\n"
"f 119/133/125 75/73/125 93/74/125\n"
"f 49/135/126 120/136/126 50/75/126\n"
"f 48/33/127 121/137/127 49/135/127\n"
"f 50/75/128 120/136/128 89/47/128\n"
"f 120/136/129 88/110/129 89/47/129\n"
"f 49/135/130 121/137/130 120/136/130\n"
"f 121/137/131 122/138/131 120/136/131\n"
"f 120/136/132 122/138/132 88/110/132\n"
"f 122/138/133 87/52/133 88/110/133\n"
"f 48/33/134 71/28/134 121/137/134\n"
"f 71/28/135 70/139/135 121/137/135\n"
"f 121/137/136 70/139/136 122/138/136\n"
"f 70/139/137 69/76/137 122/138/137\n"
"f 122/138/138 69/76/138 87/52/138\n"
"f 73/140/139 123/141/139 74/77/139\n"
"f 72/32/140 124/142/140 73/140/140\n"
"f 74/77/141 123/141/141 86/44/141\n"
"f 123/141/142 85/116/142 86/44/142\n"
"f 73/140/143 124/142/143 123/141/143\n"
"f 124/142/144 125/143/144 123/141/144\n"
"f 123/141/145 125/143/145 85/116/145\n"
"f 125/143/146 84/57/146 85/116/146\n"
"f 72/32/147 65/25/147 124/142/147\n"
"f 65/25/148 64/144/148 124/142/148\n"
"f 124/142/149 64/144/149 125/143/149\n"
"f 64/144/150 63/78/150 125/143/150\n"
"f 125/143/151 63/78/151 84/57/151\n"
"f 67/145/152 126/146/152 68/79/152\n"
"f 66/31/153 127/147/153 67/145/153\n"
"f 68/79/154 126/146/154 83/41/154\n"
"f 126/146/155 82/122/155 83/41/155\n"
"f 67/145/156 127/147/156 126/146/156\n"
"f 127/147/157 128/148/157 126/146/157\n"
"f 126/146/158 128/148/158 82/122/158\n"
"f 128/148/159 81/62/159 82/122/159\n"
"f 66/31/160 59/22/160 127/147/160\n"
"f 59/22/161 58/149/161 127/147/161\n"
"f 127/147/162 58/149/162 128/148/162\n"
"f 58/149/163 57/80/163 128/148/163\n"
"f 128/148/164 57/80/164 81/62/164\n"
"f 61/150/165 129/151/165 62/81/165\n"
"f 60/30/166 130/152/166 61/150/166\n"
"f 62/81/167 129/151/167 80/38/167\n"
"f 129/151/168 79/128/168 80/38/168\n"
"f 61/150/169 130/152/169 129/151/169\n"
"f 130/152/170 131/153/170 129/151/170\n"
"f 129/151/171 131/153/171 79/128/171\n"
"f 131/153/172 78/68/172 79/128/172\n"
"f 60/30/173 53/19/173 130/152/173\n"
"f 53/19/174 52/154/174 130/152/174\n"
"f 130/152/175 52/154/175 131/153/175\n"
"f 52/154/176 51/82/176 131/153/176\n"
"f 131/153/177 51/82/177 78/68/177\n"
"f 55/155/178 132/156/178 56/83/178\n"
"f 54/29/179 133/157/179 55/155/179\n"
"f 56/83/180 132/156/180 77/35/180\n"
"f 132/156/181 76/134/181 77/35/181\n"
"f 55/155/182 133/157/182 132/156/182\n"
"f 133/157/183 134/158/183 132/156/183\n"
"f 132/156/184 134/158/184 76/134/184\n"
"f 134/158/185 75/73/185 76/134/185\n"
"f 54/29/186 47/16/186 133/157/186\n"
"f 47/16/187 46/159/187 133/157/187\n"
"f 133/157/188 46/159/188 134/158/188\n"
"f 46/159/189 45/84/189 134/158/189\n"
"f 134/158/190 45/84/190 75/73/190\n"
"f 70/139/191 135/160/191 69/76/191\n"
"f 71/28/192 136/161/192 70/139/192\n"
"f 69/76/193 135/160/193 74/77/193\n"
"f 135/160/194 73/140/194 74/77/194\n"
"f 70/139/195 136/161/195 135/160/195\n"
"f 136/161/196 137/162/196 135/160/196\n"
"f 135/160/197 137/162/197 73/140/197\n"
"f 137/162/198 72/32/198 73/140/198\n"
"f 71/28/199 44/27/199 136/161/199\n"
"f 44/27/200 43/163/200 136/161/200\n"
"f 136/161/201 43/163/201 137/162/201\n"
"f 43/163/202 42/85/202 137/162/202\n"
"f 137/162/203 42/85/203 72/32/203\n"
"f 64/144/204 138/164/204 63/78/204\n"
"f 65/25/205 139/165/205 64/144/205\n"
"f 63/78/206 138/164/206 68/79/206\n"
"f 138/164/207 67/145/207 68/79/207\n"
"f 64/144/208 139/165/208 138/164/208\n"
"f 139/165/209 140/166/209 138/164/209\n"
"f 138/164/210 140/166/210 67/145/210\n"
"f 140/166/211 66/31/211 67/145/211\n"
"f 65/25/212 41/24/212 139/165/212\n"
"f 41/24/213 40/167/213 139/165/213\n"
"f 139/165/214 40/167/214 140/166/214\n"
"f 40/167/215 39/86/215 140/166/215\n"
"f 140/166/216 39/86/216 66/31/216\n"
"f 58/149/217 141/168/217 57/80/217\n"
"f 59/22/218 142/169/218 58/149/218\n"
"f 57/80/219 141/168/219 62/87/219\n"
"f 141/168/220 61/170/220 62/87/220\n"
"f 58/149/221 142/169/221 141/168/221\n"
"f 142/169/222 143/171/222 141/168/222\n"
"f 141/168/223 143/171/223 61/170/223\n"
"f 143/171/224 60/90/224 61/170/224\n"
"f 59/22/225 35/21/225 142/169/225\n"
"f 35/21/226 34/172/226 142/169/226\n"
"f 142/169/227 34/172/227 143/171/227\n"
"f 34/172/228 33/88/228 143/171/228\n"
"f 143/171/229 33/88/229 60/90/229\n"
"f 52/154/230 144/173/230 51/82/230\n"
"f 53/19/231 145/174/231 52/154/231\n"
"f 51/82/232 144/173/232 56/83/232\n"
"f 144/173/233 55/155/233 56/83/233\n"
"f 52/154/234 145/174/234 144/173/234\n"
"f 145/174/235 146/175/235 144/173/235\n"
"f 144/173/236 146/175/236 55/155/236\n"
"f 146/175/237 54/29/237 55/155/237\n"
"f 53/19/238 23/18/238 145/174/238\n"
"f 23/18/239 22/176/239 145/174/239\n"
"f 145/174/240 22/176/240 146/175/240\n"
"f 22/176/241 21/91/241 146/175/241\n"
"f 146/175/242 21/91/242 54/29/242\n"
"f 46/159/243 147/177/243 45/84/243\n"
"f 47/16/244 148/178/244 46/159/244\n"
"f 45/84/245 147/177/245 50/75/245\n"
"f 147/177/246 49/135/246 50/75/246\n"
"f 46/159/247 148/178/247 147/177/247\n"
"f 148/178/248 149/179/248 147/177/248\n"
"f 147/177/249 149/179/249 49/135/249\n"
"f 149/179/250 48/33/250 49/135/250\n"
"f 47/16/251 26/6/251 148/178/251\n"
"f 26/6/252 25/180/252 148/178/252\n"
"f 148/178/253 25/180/253 149/179/253\n"
"f 25/180/254 24/92/254 149/179/254\n"
"f 149/179/255 24/92/255 48/33/255\n"
"f 28/181/256 150/182/256 29/93/256\n"
"f 27/15/257 151/183/257 28/181/257\n"
"f 29/93/258 150/182/258 44/27/258\n"
"f 150/182/259 43/163/259 44/27/259\n"
"f 28/181/260 151/183/260 150/182/260\n"
"f 151/183/261 152/184/261 150/182/261\n"
"f 150/182/262 152/184/262 43/163/262\n"
"f 152/184/263 42/85/263 43/163/263\n"
"f 27/15/264 38/14/264 151/183/264\n"
"f 38/14/265 37/185/265 151/183/265\n"
"f 151/183/266 37/185/266 152/184/266\n"
"f 37/185/267 36/94/267 152/184/267\n"
"f 152/184/268 36/94/268 42/85/268\n"
"f 37/186/269 153/187/269 36/95/269\n"
"f 38/12/270 154/188/270 37/186/270\n"
"f 36/95/271 153/187/271 41/24/271\n"
"f 153/187/272 40/167/272 41/24/272\n"
"f 37/186/273 154/188/273 153/187/273\n"
"f 154/188/274 155/189/274 153/187/274\n"
"f 153/187/275 155/189/275 40/167/275\n"
"f 155/189/276 39/86/276 40/167/276\n"
"f 38/12/277 32/11/277 154/188/277\n"
"f 32/11/278 31/190/278 154/188/278\n"
"f 154/188/279 31/190/279 155/189/279\n"
"f 31/190/280 30/96/280 155/189/280\n"
"f 155/189/281 30/96/281 39/86/281\n"
"f 31/191/282 156/192/282 30/97/282\n"
"f 32/9/283 157/193/283 31/191/283\n"
"f 30/97/284 156/192/284 35/21/284\n"
"f 156/192/285 34/172/285 35/21/285\n"
"f 31/191/286 157/193/286 156/192/286\n"
"f 157/193/287 158/194/287 156/192/287\n"
"f 156/192/288 158/194/288 34/172/288\n" 
"f 158/194/289 33/88/289 34/172/289\n"
"f 32/9/290 17/8/290 157/193/290\n"
"f 17/8/291 16/195/291 157/193/291\n"
"f 157/193/292 16/195/292 158/194/292\n"
"f 16/195/293 15/98/293 158/194/293\n"
"f 158/194/294 15/98/294 33/88/294\n"
"f 25/180/295 159/196/295 24/92/295\n"
"f 26/6/296 160/197/296 25/180/296\n"
"f 24/92/297 159/196/297 29/99/297\n"
"f 159/196/298 28/198/298 29/99/298\n"
"f 25/180/299 160/197/299 159/196/299\n"
"f 160/197/300 161/199/300 159/196/300\n"
"f 159/196/301 161/199/301 28/198/301\n"
"f 161/199/302 27/102/302 28/198/302\n"
"f 26/6/303 20/5/303 160/197/303\n"
"f 20/5/304 19/200/304 160/197/304\n"
"f 160/197/305 19/200/305 161/199/305\n"
"f 19/200/306 18/100/306 161/199/306\n"
"f 161/199/307 18/100/307 27/102/307\n"
"f 16/201/308 162/202/308 15/103/308\n"
"f 17/3/309 163/203/309 16/201/309\n"
"f 15/103/310 162/202/310 23/18/310\n"
"f 162/202/311 22/176/311 23/18/311\n"
"f 16/201/312 163/203/312 162/202/312\n"
"f 163/203/313 164/204/313 162/202/313\n"
"f 162/202/314 164/204/314 22/176/314\n"
"f 164/204/315 21/91/315 22/176/315\n"
"f 17/3/316 18/2/316 163/203/316\n"
"f 18/2/317 19/205/317 163/203/317\n"
"f 163/203/318 19/205/318 164/204/318\n"
"f 19/205/319 20/104/319 164/204/319\n"
"f 164/204/320 20/104/320 21/91/320\n"
"l 1 2\n";

Drawable3DModel get_blue_cube_model() {
    ModelsInfo models_info;
    std::vector<std::string> obj_file_contents = split_string(blue_cube, '\n');
    std::vector<std::string> mtl_file_contents = split_string(general_mtl_file, '\n');
    models_info.obj_file_contents = ObjFileContents::from_file_contents(obj_file_contents);
    models_info.mtl_files_content = {MtlFileContents::from_file_contents(mtl_file_contents)};

    Drawable3DModel new_drawable_object = Drawable3DModel::from_models_info(&models_info);
    return new_drawable_object;
}

Drawable3DModel get_red_cube_model() {
    ModelsInfo models_info;
    std::vector<std::string> obj_file_contents = split_string(string_replace(blue_cube, "Blue", "Red"), '\n');
    std::vector<std::string> mtl_file_contents = split_string(general_mtl_file, '\n');
    models_info.obj_file_contents = ObjFileContents::from_file_contents(obj_file_contents);
    models_info.mtl_files_content = {MtlFileContents::from_file_contents(mtl_file_contents)};

    Drawable3DModel new_drawable_object = Drawable3DModel::from_models_info(&models_info);
    return new_drawable_object;
}

Drawable3DModel get_red_plane_model() {
    ModelsInfo models_info;
    std::vector<std::string> obj_file_contents = split_string(red_plane, '\n');
    std::vector<std::string> mtl_file_contents = split_string(general_mtl_file, '\n');
    models_info.obj_file_contents = ObjFileContents::from_file_contents(obj_file_contents);
    models_info.mtl_files_content = {MtlFileContents::from_file_contents(mtl_file_contents)};

    Drawable3DModel new_drawable_object = Drawable3DModel::from_models_info(&models_info);
    return new_drawable_object;
}

Drawable3DModel get_green_plane_model() {
    ModelsInfo models_info;
    std::vector<std::string> obj_file_contents = split_string(string_replace(red_plane, "Red", "Green"), '\n');
    std::vector<std::string> mtl_file_contents = split_string(general_mtl_file, '\n');
    models_info.obj_file_contents = ObjFileContents::from_file_contents(obj_file_contents);
    models_info.mtl_files_content = {MtlFileContents::from_file_contents(mtl_file_contents)};

    Drawable3DModel new_drawable_object = Drawable3DModel::from_models_info(&models_info);
    return new_drawable_object;
}

Drawable3DModel get_blue_sphere_model() {
    ModelsInfo models_info;
    std::vector<std::string> obj_file_contents = split_string(blue_sphere, '\n');
    std::vector<std::string> mtl_file_contents = split_string(general_mtl_file, '\n');
    models_info.obj_file_contents = ObjFileContents::from_file_contents(obj_file_contents);
    models_info.mtl_files_content = {MtlFileContents::from_file_contents(mtl_file_contents)};

    Drawable3DModel new_drawable_object = Drawable3DModel::from_models_info(&models_info);
    return new_drawable_object;
}

Drawable3DModel get_red_sphere_model() {
    ModelsInfo models_info;
    std::vector<std::string> obj_file_contents = split_string(string_replace(blue_sphere, "Blue", "Red"), '\n');
    std::vector<std::string> mtl_file_contents = split_string(general_mtl_file, '\n');
    models_info.obj_file_contents = ObjFileContents::from_file_contents(obj_file_contents);
    models_info.mtl_files_content = {MtlFileContents::from_file_contents(mtl_file_contents)};

    Drawable3DModel new_drawable_object = Drawable3DModel::from_models_info(&models_info);
    return new_drawable_object;
}

const int BLUE_CUBE_INDEX = 0;
const int RED_CUBE_INDEX = BLUE_CUBE_INDEX + 1;
const int RED_PLANE_INDEX = RED_CUBE_INDEX + 1;
const int GREEN_PLANE_INDEX = RED_PLANE_INDEX + 1;
const int BLUE_SPHERE_INDEX = GREEN_PLANE_INDEX + 1;
const int RED_SPHERE_INDEX = BLUE_SPHERE_INDEX + 1;
std::vector<Drawable3DModel> get_models_vector() {
    std::vector<Drawable3DModel> models = {
        graphics_help::get_blue_cube_model(),
        graphics_help::get_red_cube_model(),
        graphics_help::get_red_plane_model(),
        graphics_help::get_green_plane_model(),
        graphics_help::get_blue_sphere_model(),
        graphics_help::get_red_sphere_model(),
    };
    return models;
}

const std::string vert_shader =
"uniform mat4 u_MVP;\n"
"attribute vec3 position;\n"
"attribute vec3 color;\n"
"\n"
"varying vec4 v_Color;\n"
"\n"
"void main() {\n"
"    gl_Position = u_MVP * vec4(position.x, position.y, position.z, 1.0);\n"
"    v_Color = vec4(color.x, color.y, color.z, 1.0);\n"
"}\n";

const std::string frag_shader =
"precision mediump float;\n"
"varying vec4 v_Color;\n"
"\n"
"void main() {\n"
"    gl_FragColor = v_Color;\n"
"}\n";

const std::string texture_vert_shader =
"uniform mat4 u_MVP;\n"
"attribute vec3 position;\n"
"attribute vec3 color;\n"
"attribute vec2 aTexCoord;\n"
"\n"
"varying vec4 v_Color;\n"
"varying vec2 TexCoord;\n"
"\n"
"void main() {\n"
"    gl_Position = vec4(position.x, position.y, position.z, 1.0);\n"
"    v_Color = vec4(color.x, color.y, color.z, 1.0);\n"
"    TexCoord = aTexCoord;\n"
"}\n";

const std::string texture_frag_shader =
"precision mediump float;\n"
"varying vec4 v_Color;\n"
"varying vec2 TexCoord;\n"
"\n"
"uniform sampler2D ourTexture;\n"
"\n"
"void main() {\n"
"    // gl_FragColor = v_Color;\n"
"    gl_FragColor = texture2D(ourTexture, TexCoord);\n"
"}\n";


namespace text_letter {
    const std::string A = 
    ".00.."
    "0..0."
    "0..0."
    "0..0."
    "0000."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string B = 
    "000.."
    "0..0."
    "0..0."
    "000.."
    "0..0."
    "0..0."
    "000.."
    "....."
    ".....";
    const std::string C = 
    ".00.."
    "0..0."
    "0...."
    "0...."
    "0...."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string D = 
    "000.."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    "000.."
    "....."
    ".....";
    const std::string E = 
    "0000."
    "0...."
    "0...."
    "000.."
    "0...."
    "0...."
    "0000."
    "....."
    ".....";
    const std::string F = 
    "0000."
    "0...."
    "0...."
    "000.."
    "0...."
    "0...."
    "0...."
    "....."
    ".....";
    const std::string G = 
    ".00.."
    "0..0."
    "0...."
    "0...."
    "0.00."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string H = 
    "0..0."
    "0..0."
    "0..0."
    "0000."
    "0..0."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string I = 
    ".000."
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    ".000."
    "....."
    ".....";
    const std::string J = 
    "...0."
    "...0."
    "...0."
    "...0."
    "0..0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string K = 
    "0..0."
    "0..0."
    "0.0.."
    "00..."
    "0.0.."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string L = 
    ".0..."
    ".0..."
    ".0..."
    ".0..."
    ".0..."
    ".0..."
    ".0000"
    "....."
    ".....";
    const std::string M = 
    "0...0"
    "00.00"
    "0.0.0"
    "0...0"
    "0...0"
    "0...0"
    "0...0"
    "....."
    ".....";
    const std::string N = 
    "0..0."
    "0..0."
    "00.0."
    "0.00."
    "0..0."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string O = 
    ".00.."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string P = 
    "000.."
    "0..0."
    "0..0."
    "000.."
    "0...."
    "0...."
    "0...."
    "....."
    ".....";
    const std::string Q = 
    ".00.."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    "0.0.."
    ".0.0."
    "....."
    ".....";
    const std::string R = 
    "000.."
    "0..0."
    "0..0."
    "000.."
    "0..0."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string S = 
    ".00.."
    "0..0."
    "0...."
    ".00.."
    "...0."
    "...0."
    "000.."
    "....."
    ".....";
    const std::string T = 
    "00000"
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    "....."
    ".....";
    const std::string U = 
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string V = 
    "0...0"
    "0...0"
    "0...0"
    "0...0"
    "0...0"
    ".0.0."
    "..0.."
    "....."
    ".....";
    const std::string W = 
    "0...0"
    "0...0"
    "0...0"
    "0...0"
    "0.0.0"
    "0.0.0"
    ".0.0."
    "....."
    ".....";
    const std::string X = 
    "0..0."
    "0..0."
    "0..0."
    ".00.."
    "0..0."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string Y = 
    "0..0."
    "0..0."
    "0..0."
    ".000."
    "...0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string Z = 
    "0000."
    "...0."
    "...0."
    ".00.."
    "0...."
    "0...."
    "0000."
    "....."
    ".....";

    const std::string a = 
    "....."
    "....."
    ".00.."
    "...0."
    ".000."
    "0..0."
    ".000."
    "....."
    ".....";
    const std::string b = 
    "0...."
    "0...."
    "0...."
    "000.."
    "0..0."
    "0..0."
    "000.."
    "....."
    ".....";
    const std::string c = 
    "....."
    "....."
    ".00.."
    "0..0."
    "0...."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string d = 
    "...0."
    "...0."
    "...0."
    ".000."
    "0..0."
    "0..0."
    ".000."
    "....."
    ".....";
    const std::string e = 
    "....."
    "....."
    ".00.."
    "0..0."
    "0000."
    "0...."
    ".000."
    "....."
    ".....";
    const std::string f = 
    ".00.."
    "0..0."
    "0...."
    "000.."
    "0...."
    "0...."
    "0...."
    "....."
    ".....";
    const std::string g = 
    "....."
    "....."
    ".000."
    "0..0."
    "0..0."
    ".000."
    "...0."
    "...0."
    ".00..";
    const std::string h = 
    "0...."
    "0...."
    "0...."
    "000.."
    "0..0."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string i = 
    "..0.."
    "....."
    "....."
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    "....."
    ".....";
    const std::string j = 
    "...0."
    "....."
    "....."
    "...0."
    "...0."
    "...0."
    ".0.0."
    "..0.."
    ".....";
    const std::string k = 
    "0...."
    "0..0."
    "0..0."
    "000.."
    "0..0."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string l = 
    ".0..."
    ".0..."
    ".0..."
    ".0..."
    ".0..."
    ".0..."
    "..0.."
    "....."
    ".....";
    const std::string m = 
    "....."
    "....."
    "0000."
    "0.0.0"
    "0.0.0"
    "0.0.0"
    "0.0.0"
    "....."
    ".....";
    const std::string n = 
    "....."
    "....."
    "000.."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string o = 
    "....."
    "....."
    ".00.."
    "0..0."
    "0..0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string p = 
    "....."
    "....."
    ".00.."
    "0..0."
    "0..0."
    "000.."
    "0...."
    "0...."
    "0....";
    const std::string q = 
    "....."
    "....."
    ".00.."
    "0..0."
    "0..0."
    "0..0."
    ".000."
    "...0."
    "...0.";
    const std::string r = 
    "....."
    "....."
    "0.00."
    "00..."
    "0...."
    "0...."
    "0...."
    "....."
    ".....";
    const std::string s = 
    "....."
    "....."
    ".000."
    "0...."
    ".00.."
    "...0."
    "000.."
    "....."
    ".....";
    const std::string t = 
    ".0..."
    ".0..."
    "0000."
    ".0..."
    ".0..."
    ".0.0."
    "..0.."
    "....."
    ".....";
    const std::string u = 
    "....."
    "....."
    "0..0."
    "0..0."
    "0..0."
    "0..0."
    ".000."
    "....."
    ".....";
    const std::string v = 
    "....."
    "....."
    "0...0"
    "0...0"
    "0...0"
    ".0.0."
    "..0.."
    "....."
    ".....";
    const std::string w = 
    "....."
    "....."
    "0...0"
    "0...0"
    "0...0"
    "0.0.0"
    ".0.0."
    "....."
    ".....";
    const std::string x = 
    "....."
    "....."
    "0..0."
    "0..0."
    ".00.."
    "0..0."
    "0..0."
    "....."
    ".....";
    const std::string y = 
    "....."
    "....."
    "0..0."
    "0..0."
    "0..0."
    ".000."
    "...0."
    "...0."
    ".00..";
    const std::string z = 
    "....."
    "....."
    "0000."
    "...0."
    ".00.."
    "0...."
    "0000."
    "....."
    ".....";


     const std::string num0 = 
    ".00.."
    "0..0."
    "0.00."
    "00.0."
    "0..0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string num1 = 
    "..0.."
    ".00.."
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    ".000."
    "....."
    ".....";
    const std::string num2 = 
    ".00.."
    "0..0."
    "...0."
    "..0.."
    ".0..."
    "0...."
    "0000."
    "....."
    ".....";
    const std::string num3 = 
    ".00.."
    "0..0."
    "...0."
    "..0.."
    "...0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string num4 = 
    "..00."
    ".0.0."
    "0..0."
    "0000."
    "...0."
    "...0."
    "...0."
    "....."
    ".....";
    const std::string num5 = 
    "0000."
    "0...."
    "000.."
    "...0."
    "...0."
    "...0."
    "000.."
    "....."
    ".....";
    const std::string num6 = 
    "..0.."
    ".0..."
    "0...."
    "000.."
    "0..0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string num7 = 
    "0000."
    "...0."
    "...0."
    "..0.."
    ".0..."
    ".0..."
    ".0..."
    "....."
    ".....";
    const std::string num8 = 
    ".00.."
    "0..0."
    "0..0."
    ".00.."
    "0..0."
    "0..0."
    ".00.."
    "....."
    ".....";
    const std::string num9 = 
    ".00.."
    "0..0."
    "0..0."
    ".000."
    "...0."
    "..0.."
    ".0..."
    "....."
    ".....";

    const std::string space_ = 
    "....."
    "....."
    "....."
    "....."
    "....."
    "....."
    "....."
    "....."
    ".....";

    const std::string excl_mark = 
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    "..0.."
    "....."
    "..0.."
    "....."
    ".....";
    const std::string dot = 
    "....."
    "....."
    "....."
    "....."
    "....."
    "....."
    "..0.."
    "....."
    ".....";
    const std::string comma = 
    "....."
    "....."
    "....."
    "....."
    "....."
    "....."
    "..0.."
    ".0..."
    ".....";
    const std::string colon = 
    "....."
    "....."
    "..0.."
    "....."
    "....."
    "..0.."
    "....."
    "....."
    ".....";
    const std::string semi_colon = 
    "....."
    "....."
    "..0.."
    "....."
    "....."
    "..0.."
    ".0..."
    "....."
    ".....";
    const std::string question_mark = 
    ".00.."
    "0..0."
    "...0."
    "..0.."
    ".0..."
    "....."
    ".0..."
    "....."
    ".....";

    const std::string alphabet = 
    A+B+C+D+E+F+G+H+I+J+K+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+
    a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+
    num0 + num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + 
    space_ +
    excl_mark +
    dot +
    comma +
    colon +
    semi_colon +
    question_mark;

    const int LETTER_WIDTH = 5;
    const int LETTER_HEIGHT = 9;
    const int LETTER_COUNT = text_letter::alphabet.size() / (text_letter::LETTER_WIDTH * text_letter::LETTER_HEIGHT);

    // Make sure the texture is a power of 2
    const int ALPHABET_TEXTURE_WIDTH = upper_power_of_two(LETTER_WIDTH);
    const int ALPHABET_TEXTURE_HEIGHT = upper_power_of_two(LETTER_COUNT*LETTER_HEIGHT);
}

    int get_char_index(char c_) {
        int acc = 0;
        if(c_ >= 'A' && c_ <= 'Z') {
            return c_ - 'A' + acc;
        }
        acc += 'Z'-'A'+1;
        if(c_ >= 'a' && c_ <= 'z') {
            return c_ - 'a' + acc;
        }
        acc += 'z'-'a'+1;
        if(c_ >= '0' && c_ <= '9') {
            return c_ - '0' + acc;
        }
        acc += '9'-'0'+1;
        if(c_ == ' ') {
            return acc;
        }
        acc++;
        return acc; // Return question mark if no matches
    }
    struct TexCoord {
        float x1;
        float y1;
        float x2;
        float y2;
    };
    TexCoord get_texture_coordinate(char c_) {
        int char_index = get_char_index(c_);
        DebugExpr(char_index);
        TexCoord tex_coord;
        const double letter_height_prop = ((double)text_letter::LETTER_HEIGHT) / text_letter::ALPHABET_TEXTURE_HEIGHT; 
        const double letter_width_prop = ((double)text_letter::LETTER_WIDTH) / text_letter::ALPHABET_TEXTURE_WIDTH; 
        tex_coord.x1 = 0;
        tex_coord.y1 = char_index * letter_height_prop;
        tex_coord.x2 = letter_width_prop;
        tex_coord.y2 = (char_index + 1.0) * letter_height_prop;
        return tex_coord;
    }

    // x and y is the upper left corner of text on screen
    // -1 < x < 1, -1 < y < 1
    TextureTraingles get_texture_triangles_from_text(std::string text, double x, double y, double letter_width) {
        std::vector<TextureTriangleVertex> VERTICIES = {};
        VERTICIES.resize(text.size() * 4);

        std::vector<TraingleIndecies> INDICIES = {};
        INDICIES.resize(text.size() * 2);
        
        double spacing = 1.0 * letter_width / (double)text_letter::LETTER_WIDTH;
        double letter_height = letter_width * ((double)text_letter::LETTER_HEIGHT) / text_letter::LETTER_WIDTH;
        int x_index = 0;
        int y_index = 0;
        int letter_count = 0;
        for(int i = 0; i < text.size(); i++) {
            if(text[i] == '\n') { // Newline
                x_index = 0;
                y_index += 1;
                continue;
            }
            TexCoord tex_coord = get_texture_coordinate(text[i]);
            double x1 = x + x_index * (letter_width + spacing);
            double y1 = y - (y_index+1) * (letter_height + spacing) + spacing;
            double x2 = x + (x_index+1) * (letter_width + spacing) - spacing;
            double y2 = y - y_index * (letter_height + spacing);
            VERTICIES[letter_count*4+0] = TextureTriangleVertex(x2, y2, 0.0f, tex_coord.x2, tex_coord.y1); // top right
            VERTICIES[letter_count*4+1] = TextureTriangleVertex(x2, y1, 0.0f, tex_coord.x2, tex_coord.y2); // bottom right
            VERTICIES[letter_count*4+2] = TextureTriangleVertex(x1, y1, 0.0f, tex_coord.x1, tex_coord.y2); // bottom left
            VERTICIES[letter_count*4+3] = TextureTriangleVertex(x1, y2, 0.0f, tex_coord.x1, tex_coord.y1); // top left 
            INDICIES[letter_count*2] =   TraingleIndecies(letter_count*4+0, letter_count*4+1, letter_count*4+2);
            INDICIES[letter_count*2+1] = TraingleIndecies(letter_count*4+0, letter_count*4+2, letter_count*4+3);
            letter_count += 1;
            x_index += 1;
        }

        // Remove unused indexes
        VERTICIES.resize(letter_count * 4);
        INDICIES.resize(letter_count * 2);

        TextureTraingles texture_indecies_and_verticies = TextureTraingles(VERTICIES, INDICIES);

        return texture_indecies_and_verticies;
    }
    RawImage get_raw_image_of_alphabet() {
        std::vector<RGBPixel> pixels = {};
        pixels.resize(text_letter::ALPHABET_TEXTURE_WIDTH*text_letter::ALPHABET_TEXTURE_HEIGHT);
        for(int x = 0; x < text_letter::ALPHABET_TEXTURE_WIDTH; x++) {
            for(int y = 0; y < text_letter::ALPHABET_TEXTURE_HEIGHT; y++) {
                unsigned int pixel_index = x + text_letter::ALPHABET_TEXTURE_WIDTH*y;
                if(x < text_letter::LETTER_WIDTH && y < text_letter::LETTER_HEIGHT*text_letter::LETTER_COUNT) {
                    unsigned int alphabet_index = x + text_letter::LETTER_WIDTH*y;
                    if(text_letter::alphabet[alphabet_index] == '.') {
                        pixels[pixel_index] = RGBPixel(0, 0, 0);
                    }
                    else {
                        pixels[pixel_index] = RGBPixel(255, 255, 255);
                    }
                }
                else {
                    pixels[pixel_index] = RGBPixel(0, 0, 0);
                }
            }
        }
        RawImage new_raw_image = RawImage(pixels, text_letter::ALPHABET_TEXTURE_WIDTH, text_letter::ALPHABET_TEXTURE_HEIGHT);
        return new_raw_image;
    }
} 
